// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-macos12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DxFeedSwiftFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import DxFeedSwiftFramework
import Foundation
import Swift
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Trade : DxFeedSwiftFramework.TradeBase, DxFeedSwiftFramework.MarketEvent {
  final public let type: DxFeedSwiftFramework.EventCode
  @objc deinit
}
public typealias Role = DxFeedSwiftFramework.DXEndpoint.Role
@_hasMissingDesignatedInitializers public class DXEndpoint {
  public enum Role : Swift.UInt32 {
    case feed
    case onDemandFeed
    case streamFeed
    case publisher
    case streamPublisher
    case localHub
    public init?(rawValue: Swift.UInt32)
    public typealias RawValue = Swift.UInt32
    public var rawValue: Swift.UInt32 {
      get
    }
  }
  public enum Property : Swift.String, Swift.CaseIterable {
    case name
    case properties
    case address
    case user
    case password
    case threadPoolSize
    case aggregationPeriod
    case wildcardEnable
    case publisherProperties
    case publisherThreadPoolSize
    case eventTime
    case storeEverything
    case schemeNanoTime
    case schemeEnabledPropertyPrefix
    public init?(rawValue: Swift.String)
    public typealias AllCases = [DxFeedSwiftFramework.DXEndpoint.Property]
    public typealias RawValue = Swift.String
    public static var allCases: [DxFeedSwiftFramework.DXEndpoint.Property] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  final public let role: DxFeedSwiftFramework.DXEndpoint.Role
  public func add<O>(_ observer: O) where O : DxFeedSwiftFramework.DXEndpointObserver, O : Swift.Hashable
  public func remove<O>(_ observer: O) where O : DxFeedSwiftFramework.DXEndpointObserver, O : Swift.Hashable
  public static func builder() -> DxFeedSwiftFramework.Builder
  public func getFeed() -> DxFeedSwiftFramework.DXFeed?
  public func connect(_ address: Swift.String) throws
  public func reconnect() throws
  public func disconnect() throws
  public func disconnectAndClear() throws
  public func close() throws
  public func set(password: Swift.String) throws -> Self
  public func set(userName: Swift.String) throws -> Self
  public func awaitProcessed() throws
  public func awaitNotConnected() throws
  public func getState() throws -> DxFeedSwiftFramework.DXEndpointState
  public static func create(_ role: DxFeedSwiftFramework.DXEndpoint.Role) throws -> DxFeedSwiftFramework.DXEndpoint
  public static func getInstance(_ role: DxFeedSwiftFramework.DXEndpoint.Role) throws -> DxFeedSwiftFramework.DXEndpoint
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Builder {
  @objc deinit
  public func withRole(_ role: DxFeedSwiftFramework.Role) throws -> Self
  public func isSupported(property: Swift.String) throws -> Swift.Bool
  public func withProperty(_ key: Swift.String, _ value: Swift.String) throws -> Self
  public func build() throws -> DxFeedSwiftFramework.DXEndpoint
}
public protocol DXEventListener : AnyObject {
  func receiveEvents(_ events: [any DxFeedSwiftFramework.MarketEvent])
}
@_hasMissingDesignatedInitializers public class DXFeed {
  @objc deinit
  public func createSubscription(_ events: [DxFeedSwiftFramework.EventCode]) throws -> DxFeedSwiftFramework.DXFeedSubcription
  public func createSubscription(_ event: DxFeedSwiftFramework.EventCode) throws -> DxFeedSwiftFramework.DXFeedSubcription
}
extension Swift.String : DxFeedSwiftFramework.Symbol {
  public var stringValue: Swift.String {
    get
  }
}
extension Swift.String {
  public init(pointee: Swift.UnsafePointer<Swift.CChar>!, default value: Swift.String = "")
}
public protocol Symbol {
  var stringValue: Swift.String { get }
}
public enum DXEndpointState {
  case notConnected
  case connecting
  case connected
  case closed
  public static func == (a: DxFeedSwiftFramework.DXEndpointState, b: DxFeedSwiftFramework.DXEndpointState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DXFeedSubcription {
  @objc deinit
  public func add<O>(_ observer: O) where O : DxFeedSwiftFramework.DXEventListener, O : Swift.Hashable
  public func remove<O>(_ observer: O) where O : DxFeedSwiftFramework.DXEventListener, O : Swift.Hashable
  public func addSymbols(_ symbol: any DxFeedSwiftFramework.Symbol) throws
  public func addSymbols(_ symbols: [any DxFeedSwiftFramework.Symbol]) throws
}
extension DxFeedSwiftFramework.DXFeedSubcription : DxFeedSwiftFramework.DXEventListener {
  public func receiveEvents(_ events: [any DxFeedSwiftFramework.MarketEvent])
}
extension DxFeedSwiftFramework.DXFeedSubcription : Swift.Hashable {
  public static func == (lhs: DxFeedSwiftFramework.DXFeedSubcription, rhs: DxFeedSwiftFramework.DXFeedSubcription) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol DXEndpointObserver {
  func endpointDidChangeState(old: DxFeedSwiftFramework.DXEndpointState, new: DxFeedSwiftFramework.DXEndpointState)
}
public enum EventCode : Swift.CaseIterable {
  case quote
  case profile
  case summary
  case greeks
  case candle
  case dailyCandle
  case underlying
  case theoPrice
  case trade
  case tradeETH
  case configuration
  case message
  case timeAndSale
  case orderBase
  case order
  case analyticOrder
  case spreadOrder
  case series
  case optionSale
  public static func == (a: DxFeedSwiftFramework.EventCode, b: DxFeedSwiftFramework.EventCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [DxFeedSwiftFramework.EventCode]
  public static var allCases: [DxFeedSwiftFramework.EventCode] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TimeAndSale : DxFeedSwiftFramework.MarketEvent, Swift.CustomStringConvertible {
  final public let type: DxFeedSwiftFramework.EventCode
  final public let eventSymbol: Swift.String
  final public let eventTime: Swift.Int64
  final public let eventFlags: Swift.Int32
  final public let index: Swift.Int64
  final public let timeNanoPart: Swift.Int32
  final public let exchangeCode: Swift.Int16
  final public let price: Swift.Double
  final public let size: Swift.Double
  final public let bidPrice: Swift.Double
  final public let askPrice: Swift.Double
  final public let exchangeSaleConditions: Swift.String
  final public let flags: Swift.Int32
  final public let buyer: Swift.String
  final public let seller: Swift.String
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TradeBase : Swift.CustomStringConvertible {
  final public let eventSymbol: Swift.String
  final public let eventTime: Swift.Int64
  final public let timeSequence: Swift.Int64
  final public let timeNanoPart: Swift.Int32
  final public let exchangeCode: Swift.Int16
  final public let price: Swift.Double
  final public let change: Swift.Double
  final public let size: Swift.Double
  final public let dayId: Swift.Int32
  final public let dayVolume: Swift.Double
  final public let dayTurnover: Swift.Double
  final public let flags: Swift.Int32
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Profile : DxFeedSwiftFramework.MarketEvent, Swift.CustomStringConvertible {
  final public let type: DxFeedSwiftFramework.EventCode
  final public let eventSymbol: Swift.String
  final public let eventTime: Swift.Int64
  final public let descriptionStr: Swift.String
  final public let statusReason: Swift.String
  final public let haltStartTime: Swift.Int64
  final public let haltEndTime: Swift.Int64
  final public let highLimitPrice: Swift.Double
  final public let lowLimitPrice: Swift.Double
  final public let high52WeekPrice: Swift.Double
  final public let low52WeekPrice: Swift.Double
  final public let beta: Swift.Double
  final public let earningsPerShare: Swift.Double
  final public let dividendFrequency: Swift.Double
  final public let exDividendAmount: Swift.Double
  final public let exDividendDayId: Swift.Int32
  final public let shares: Swift.Double
  final public let freeFloat: Swift.Double
  final public let flags: Swift.Int32
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Quote : DxFeedSwiftFramework.MarketEvent, Swift.CustomStringConvertible {
  final public let type: DxFeedSwiftFramework.EventCode
  final public let eventSymbol: Swift.String
  final public let eventTime: Swift.Int64
  final public let timeMillisSequence: Swift.Int32
  final public let timeNanoPart: Swift.Int32
  final public let bidTime: Swift.Int64
  final public let bidExchangeCode: Swift.Int16
  final public let bidPrice: Swift.Double
  final public let bidSize: Swift.Double
  final public let askTime: Swift.Int64
  final public let askExchangeCode: Swift.Int16
  final public let askPrice: Swift.Double
  final public let askSize: Swift.Double
  public var description: Swift.String {
    get
  }
  @objc deinit
}
public protocol MarketEvent {
  var type: DxFeedSwiftFramework.EventCode { get }
  var eventSymbol: Swift.String { get }
  var eventTime: Swift.Int64 { get }
}
extension DxFeedSwiftFramework.DXEndpoint.Role : Swift.Equatable {}
extension DxFeedSwiftFramework.DXEndpoint.Role : Swift.Hashable {}
extension DxFeedSwiftFramework.DXEndpoint.Role : Swift.RawRepresentable {}
extension DxFeedSwiftFramework.DXEndpoint.Property : Swift.Equatable {}
extension DxFeedSwiftFramework.DXEndpoint.Property : Swift.Hashable {}
extension DxFeedSwiftFramework.DXEndpoint.Property : Swift.RawRepresentable {}
extension DxFeedSwiftFramework.EventCode : Swift.Equatable {}
extension DxFeedSwiftFramework.EventCode : Swift.Hashable {}
extension DxFeedSwiftFramework.DXEndpointState : Swift.Equatable {}
extension DxFeedSwiftFramework.DXEndpointState : Swift.Hashable {}
